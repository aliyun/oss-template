FormatVersion: OOS-2019-06-01
Description:
  name-en: ACS::CICD::LocalBuildAndDeploy
  name-zh-cn: 本地构建并部署
  en: Build and deploy the local code
  zh-cn: 本地构建并部署
Parameters:
  instanceId:
    Label:
      en: InstanceId
      zh-cn: ECS实例ID
    Description:
      en: The ID of ECS instance
      zh-cn: ECS实例ID
    Type: String
    AssociationProperty: ALIYUN::ECS::Instance::InstanceId
    AssociationPropertyMetadata:
      RegionId: '{{ ACS::RegionId }}'
  codeSource:
    Label:
      en: CodeResource
      zh-cn: 代码源
    Type: String
    AllowedValues:
      - oss
      - git
  codeSourceUrl:
    Label:
      en: CodeResourceUrl
      zh-cn: 代码源链接
    Type: String
    AssociationPropertyMetadata:
      PropertyType: ref
  isDockerBuild:
    Label:
      en: IsDockerBuild
      zh-cn: 是否Docker构建
    Description:
      en: If true, docker will automatically be install on your ecs.
      zh-cn: 如果为true，会为您在ECS上自动安装Docker。
    Type: Boolean
    Default: true
  workingDir:
    Label:
      en: WorkingDir
      zh-cn: 工作目录
    Type: String
    Default: /root/workspace/{{ACS::ExecutionId}}
    Description:
      en: The code is pulled to this directory and the build deployment script is executed in this directory as a working directory.
      zh-cn: 代码会被拉取到该目录，构建部署脚本也会以该目录作为执行的工作目录。
  buildAndDeployScript:
    Label:
      en: buildAndDeployScript
      zh-cn: 构建部署脚本
    Type: String
    MaxLength: 16384
    AssociationProperty: ALIYUN::OOS::Command::CommandContent
    AssociationPropertyMetadata:
      CommandType: RunShellScript
Tasks:
  - Name: downloadCodeFromOss
    Action: ACS::ECS::DownloadFile
    When:
      Fn::Equals:
        - '{{ codeSource }}'
        - oss
    Description:
      en: Download code from OSS
      zh-cn: 从OSS下载代码
    Properties:
      regionId: '{{ ACS::RegionId }}'
      instanceId: '{{ instanceId }}'
      sourceType: https
      sourcePath: '{{ codeSourceUrl }}'
      destinationDir: '{{ workingDir }}'
    Outputs:
      commandOutput:
        Type: String
        ValueSelector: commandOutput
  - Name: downloadCodeFromGit
    Action: ACS::ECS::RunCommand
    When:
      Fn::Equals:
        - '{{ codeSource }}'
        - git
    Description:
      en: Download code from git
      zh-cn: 从git下载代码
    Properties:
      regionId: '{{ ACS::RegionId }}'
      instanceId: '{{ instanceId }}'
      commandType: RunShellScript
      commandContent: |-
        #!/bin/bash
        # Function to install git on Ubuntu/Debian
        install_git_debian() {
            echo "Installing git..."
            sudo apt-get update
            sudo apt-get install git -y
        }
        
        # Function to install git on CentOS/Red Hat
        install_git_centos() {
            echo "Installing git..."
            sudo yum install git -y
        }
        
        # Identify the Operating System
        . /etc/os-release
        
        case $ID in
            ubuntu|debian)
                echo "Detected system: Ubuntu/Debian"
                install_git_debian
                ;;
            centos|rhel|alinux)
                echo "Detected system: CentOS/Red Hat"
                install_git_centos
                ;;
            *)
                echo "Unsupported Operating System: $ID"
                exit 1
                ;;
        esac
        
        echo "Git installation script has completed."
        mkdir -p {{ workingDir }}
        cd {{ workingDir }}
        git clone {{ codeSourceUrl }} .
    Outputs:
      commandOutput:
        Type: String
        ValueSelector: invocationOutput
  - Name: installDocker
    When:
      Fn::Equals:
        - '{{ isDockerBuild }}'
        - true
    Description:
      en: Install environment
      zh-cn: 安装Docker环境
    Action: ACS::ECS::ConfigureOOSPackageWithTemporaryURL
    Properties:
      regionId: '{{ ACS::RegionId }}'
      instanceId: '{{ instanceId }}'
      action: install
      packageName: ACS-Extension-DockerCE-1853370294850618
    Outputs:
      commandOutput:
        Type: String
        ValueSelector: commandOutput
  - Name: buildAndDeploy
    Action: ACS::ECS::RunCommand
    Description:
      en: Build and deploy
      zh-cn: 构建并部署
    Properties:
      regionId: '{{ ACS::RegionId }}'
      instanceId: '{{ instanceId }}'
      commandType: RunShellScript
      workingDir: '{{ workingDir }}'
      commandContent: '{{ buildAndDeployScript }}'
      maxRetryInterval: 12
      timeout: 3600
    Outputs:
      commandOutput:
        Type: String
        ValueSelector: invocationOutput
Outputs:
  downloadCodeFromOssOutput:
    Type: String
    Value: '{{ downloadCodeFromOss.commandOutput }}'
  downloadCodeFromGitOutput:
    Type: String
    Value: '{{ downloadCodeFromGit.commandOutput }}'
  installDockerOutput:
    Type: String
    Value: '{{ installDocker.commandOutput }}'
  buildAndDeployOutput:
    Type: String
    Value: '{{ buildAndDeploy.commandOutput }}'